import React from 'react';
import { styled, Chip } from '@mui/material';

// Define a type for the variant colors
type BadgeVariant = 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info' | 'neutral';
type BadgeSize = 'small' | 'medium' | 'large';

// Define a type for the color mapping
type VariantColorMap = {
  [key in BadgeVariant]: {
    bg: string;
    color: string;
    border: string;
    glow: string;
  }
};

// Define a type for the size mapping
type SizeStyleMap = {
  [key in BadgeSize]: {
    height: string;
    fontSize: string;
    padding: string;
  }
};

// Define custom badge props
interface BadgeProps {
  label: React.ReactNode;
  variant?: BadgeVariant;
  size?: BadgeSize;
  glow?: boolean;
  pill?: boolean;
  className?: string;
  onClick?: () => void;
  [key: string]: any; // Allow other props
}

// Type for the styled component props
interface StyledBadgeProps {
  glow?: boolean;
  pill?: boolean;
  size?: BadgeSize;
  badgeVariant?: BadgeVariant;
  theme?: any;
}

// Styled Chip component for badges
const StyledBadge = styled(Chip)<StyledBadgeProps>(({ theme, badgeVariant = 'primary', glow = false, pill = true, size = 'medium' }) => {
  // Color mapping for different variants
  const variantColors: VariantColorMap = {
    primary: {
      bg: 'rgba(99, 102, 241, 0.15)',
      color: '#818cf8',
      border: 'rgba(99, 102, 241, 0.3)',
      glow: 'rgba(99, 102, 241, 0.6)',
    },
    secondary: {
      bg: 'rgba(139, 92, 246, 0.15)',
      color: '#a78bfa',
      border: 'rgba(139, 92, 246, 0.3)',
      glow: 'rgba(139, 92, 246, 0.6)',
    },
    success: {
      bg: 'rgba(34, 197, 94, 0.15)',
      color: '#4ade80',
      border: 'rgba(34, 197, 94, 0.3)',
      glow: 'rgba(34, 197, 94, 0.6)',
    },
    error: {
      bg: 'rgba(239, 68, 68, 0.15)',
      color: '#f87171',
      border: 'rgba(239, 68, 68, 0.3)',
      glow: 'rgba(239, 68, 68, 0.6)',
    },
    warning: {
      bg: 'rgba(234, 179, 8, 0.15)',
      color: '#facc15',
      border: 'rgba(234, 179, 8, 0.3)',
      glow: 'rgba(234, 179, 8, 0.6)',
    },
    info: {
      bg: 'rgba(6, 182, 212, 0.15)',
      color: '#22d3ee',
      border: 'rgba(6, 182, 212, 0.3)',
      glow: 'rgba(6, 182, 212, 0.6)',
    },
    neutral: {
      bg: 'rgba(148, 163, 184, 0.15)',
      color: '#94a3b8',
      border: 'rgba(148, 163, 184, 0.3)',
      glow: 'rgba(148, 163, 184, 0.6)',
    },
  };

  // Size mapping
  const sizeStyles: SizeStyleMap = {
    small: {
      height: '22px',
      fontSize: '0.75rem',
      padding: '0 8px',
    },
    medium: {
      height: '28px',
      fontSize: '0.875rem',
      padding: '0 12px',
    },
    large: {
      height: '34px',
      fontSize: '0.9375rem',
      padding: '0 14px',
    },
  };

  const colors = variantColors[badgeVariant];
  const sizeStyle = sizeStyles[size];

  return {
    backgroundColor: colors.bg,
    color: colors.color,
    borderRadius: pill ? '100px' : '6px',
    border: `1px solid ${colors.border}`,
    fontWeight: 600,
    letterSpacing: '0.1px',
    transition: 'all 0.2s ease',
    ...sizeStyle,

    ...(glow && {
      boxShadow: `0 0 8px ${colors.glow}`,
    }),

    '&:hover': {
      backgroundColor: colors.bg,
      opacity: 0.9,
    },
  };
});

const Badge = ({
  label,
  variant = 'primary',
  size = 'medium',
  glow = false,
  pill = true,
  ...props
}: BadgeProps) => {
  return (
    <StyledBadge
      label={label}
      badgeVariant={variant}
      size={size}
      glow={glow}
      pill={pill}
      {...props}
    />
  );
};

export default Badge;
